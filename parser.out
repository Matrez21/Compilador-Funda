Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> expression MINUS expression
Rule 3     expression -> expression MULTIPLY expression
Rule 4     expression -> expression DIVIDE expression
Rule 5     expression -> NUMBER
Rule 6     expression -> LPAREN expression RPAREN
Rule 7     program -> function program
Rule 8     program -> statement program
Rule 9     program -> empty
Rule 10    function -> FUNCION ID LPAREN parameters RPAREN block
Rule 11    parameters -> parameters COMA ID
Rule 12    parameters -> ID
Rule 13    parameters -> empty
Rule 14    expression -> ID LPAREN arguments RPAREN
Rule 15    statement -> RETURN expression PTCOMA
Rule 16    block -> LLAVIZQ statement_list LLAVDER
Rule 17    statement_list -> statement
Rule 18    statement_list -> statement statement_list
Rule 19    statement -> IMPRIMIR LPAREN expression RPAREN
Rule 20    statement -> IMPRIMIR LPAREN expression RPAREN PTCOMA
Rule 21    arguments -> expression
Rule 22    arguments -> expression COMA arguments
Rule 23    empty -> <empty>

Terminals, with rules where they appear

COMA                 : 11 22
DIVIDE               : 4
FUNCION              : 10
ID                   : 10 11 12 14
IMPRIMIR             : 19 20
LLAVDER              : 16
LLAVIZQ              : 16
LPAREN               : 6 10 14 19 20
MINUS                : 2
MULTIPLY             : 3
NUMBER               : 5
PLUS                 : 1
PTCOMA               : 15 20
RETURN               : 15
RPAREN               : 6 10 14 19 20
error                : 

Nonterminals, with rules where they appear

arguments            : 14 22
block                : 10
empty                : 9 13
expression           : 1 1 2 2 3 3 4 4 6 15 19 20 21 22
function             : 7
parameters           : 10 11
program              : 7 8 0
statement            : 8 17 18
statement_list       : 16 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (7) program -> . function program
    (8) program -> . statement program
    (9) program -> . empty
    (10) function -> . FUNCION ID LPAREN parameters RPAREN block
    (15) statement -> . RETURN expression PTCOMA
    (19) statement -> . IMPRIMIR LPAREN expression RPAREN
    (20) statement -> . IMPRIMIR LPAREN expression RPAREN PTCOMA
    (23) empty -> .

    FUNCION         shift and go to state 5
    RETURN          shift and go to state 6
    IMPRIMIR        shift and go to state 7
    $end            reduce using rule 23 (empty -> .)

    program                        shift and go to state 1
    function                       shift and go to state 2
    statement                      shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (7) program -> function . program
    (7) program -> . function program
    (8) program -> . statement program
    (9) program -> . empty
    (10) function -> . FUNCION ID LPAREN parameters RPAREN block
    (15) statement -> . RETURN expression PTCOMA
    (19) statement -> . IMPRIMIR LPAREN expression RPAREN
    (20) statement -> . IMPRIMIR LPAREN expression RPAREN PTCOMA
    (23) empty -> .

    FUNCION         shift and go to state 5
    RETURN          shift and go to state 6
    IMPRIMIR        shift and go to state 7
    $end            reduce using rule 23 (empty -> .)

    function                       shift and go to state 2
    program                        shift and go to state 8
    statement                      shift and go to state 3
    empty                          shift and go to state 4

state 3

    (8) program -> statement . program
    (7) program -> . function program
    (8) program -> . statement program
    (9) program -> . empty
    (10) function -> . FUNCION ID LPAREN parameters RPAREN block
    (15) statement -> . RETURN expression PTCOMA
    (19) statement -> . IMPRIMIR LPAREN expression RPAREN
    (20) statement -> . IMPRIMIR LPAREN expression RPAREN PTCOMA
    (23) empty -> .

    FUNCION         shift and go to state 5
    RETURN          shift and go to state 6
    IMPRIMIR        shift and go to state 7
    $end            reduce using rule 23 (empty -> .)

    statement                      shift and go to state 3
    program                        shift and go to state 9
    function                       shift and go to state 2
    empty                          shift and go to state 4

state 4

    (9) program -> empty .

    $end            reduce using rule 9 (program -> empty .)


state 5

    (10) function -> FUNCION . ID LPAREN parameters RPAREN block

    ID              shift and go to state 10


state 6

    (15) statement -> RETURN . expression PTCOMA
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . LPAREN expression RPAREN
    (14) expression -> . ID LPAREN arguments RPAREN

    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    expression                     shift and go to state 11

state 7

    (19) statement -> IMPRIMIR . LPAREN expression RPAREN
    (20) statement -> IMPRIMIR . LPAREN expression RPAREN PTCOMA

    LPAREN          shift and go to state 15


state 8

    (7) program -> function program .

    $end            reduce using rule 7 (program -> function program .)


state 9

    (8) program -> statement program .

    $end            reduce using rule 8 (program -> statement program .)


state 10

    (10) function -> FUNCION ID . LPAREN parameters RPAREN block

    LPAREN          shift and go to state 16


state 11

    (15) statement -> RETURN expression . PTCOMA
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PTCOMA          shift and go to state 17
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21


state 12

    (5) expression -> NUMBER .

    PTCOMA          reduce using rule 5 (expression -> NUMBER .)
    PLUS            reduce using rule 5 (expression -> NUMBER .)
    MINUS           reduce using rule 5 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 5 (expression -> NUMBER .)
    DIVIDE          reduce using rule 5 (expression -> NUMBER .)
    RPAREN          reduce using rule 5 (expression -> NUMBER .)
    COMA            reduce using rule 5 (expression -> NUMBER .)


state 13

    (6) expression -> LPAREN . expression RPAREN
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . LPAREN expression RPAREN
    (14) expression -> . ID LPAREN arguments RPAREN

    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    expression                     shift and go to state 22

state 14

    (14) expression -> ID . LPAREN arguments RPAREN

    LPAREN          shift and go to state 23


state 15

    (19) statement -> IMPRIMIR LPAREN . expression RPAREN
    (20) statement -> IMPRIMIR LPAREN . expression RPAREN PTCOMA
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . LPAREN expression RPAREN
    (14) expression -> . ID LPAREN arguments RPAREN

    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    expression                     shift and go to state 24

state 16

    (10) function -> FUNCION ID LPAREN . parameters RPAREN block
    (11) parameters -> . parameters COMA ID
    (12) parameters -> . ID
    (13) parameters -> . empty
    (23) empty -> .

    ID              shift and go to state 25
    RPAREN          reduce using rule 23 (empty -> .)
    COMA            reduce using rule 23 (empty -> .)

    parameters                     shift and go to state 26
    empty                          shift and go to state 27

state 17

    (15) statement -> RETURN expression PTCOMA .

    FUNCION         reduce using rule 15 (statement -> RETURN expression PTCOMA .)
    RETURN          reduce using rule 15 (statement -> RETURN expression PTCOMA .)
    IMPRIMIR        reduce using rule 15 (statement -> RETURN expression PTCOMA .)
    $end            reduce using rule 15 (statement -> RETURN expression PTCOMA .)
    LLAVDER         reduce using rule 15 (statement -> RETURN expression PTCOMA .)


state 18

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . LPAREN expression RPAREN
    (14) expression -> . ID LPAREN arguments RPAREN

    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    expression                     shift and go to state 28

state 19

    (2) expression -> expression MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . LPAREN expression RPAREN
    (14) expression -> . ID LPAREN arguments RPAREN

    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    expression                     shift and go to state 29

state 20

    (3) expression -> expression MULTIPLY . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . LPAREN expression RPAREN
    (14) expression -> . ID LPAREN arguments RPAREN

    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    expression                     shift and go to state 30

state 21

    (4) expression -> expression DIVIDE . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . LPAREN expression RPAREN
    (14) expression -> . ID LPAREN arguments RPAREN

    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    expression                     shift and go to state 31

state 22

    (6) expression -> LPAREN expression . RPAREN
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 32
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21


state 23

    (14) expression -> ID LPAREN . arguments RPAREN
    (21) arguments -> . expression
    (22) arguments -> . expression COMA arguments
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . LPAREN expression RPAREN
    (14) expression -> . ID LPAREN arguments RPAREN

    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    arguments                      shift and go to state 33
    expression                     shift and go to state 34

state 24

    (19) statement -> IMPRIMIR LPAREN expression . RPAREN
    (20) statement -> IMPRIMIR LPAREN expression . RPAREN PTCOMA
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 35
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21


state 25

    (12) parameters -> ID .

    RPAREN          reduce using rule 12 (parameters -> ID .)
    COMA            reduce using rule 12 (parameters -> ID .)


state 26

    (10) function -> FUNCION ID LPAREN parameters . RPAREN block
    (11) parameters -> parameters . COMA ID

    RPAREN          shift and go to state 36
    COMA            shift and go to state 37


state 27

    (13) parameters -> empty .

    RPAREN          reduce using rule 13 (parameters -> empty .)
    COMA            reduce using rule 13 (parameters -> empty .)


state 28

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PTCOMA          reduce using rule 1 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 1 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 1 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS expression .)
    COMA            reduce using rule 1 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21

  ! MULTIPLY        [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 18 ]
  ! MINUS           [ shift and go to state 19 ]


state 29

    (2) expression -> expression MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PTCOMA          reduce using rule 2 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 2 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 2 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS expression .)
    COMA            reduce using rule 2 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21

  ! MULTIPLY        [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 18 ]
  ! MINUS           [ shift and go to state 19 ]


state 30

    (3) expression -> expression MULTIPLY expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PTCOMA          reduce using rule 3 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 3 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 3 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 3 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 3 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 3 (expression -> expression MULTIPLY expression .)
    COMA            reduce using rule 3 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 18 ]
  ! MINUS           [ shift and go to state 19 ]
  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]


state 31

    (4) expression -> expression DIVIDE expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PTCOMA          reduce using rule 4 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 4 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 4 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 4 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 4 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 4 (expression -> expression DIVIDE expression .)
    COMA            reduce using rule 4 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 18 ]
  ! MINUS           [ shift and go to state 19 ]
  ! MULTIPLY        [ shift and go to state 20 ]
  ! DIVIDE          [ shift and go to state 21 ]


state 32

    (6) expression -> LPAREN expression RPAREN .

    PTCOMA          reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    MULTIPLY        reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 6 (expression -> LPAREN expression RPAREN .)
    COMA            reduce using rule 6 (expression -> LPAREN expression RPAREN .)


state 33

    (14) expression -> ID LPAREN arguments . RPAREN

    RPAREN          shift and go to state 38


state 34

    (21) arguments -> expression .
    (22) arguments -> expression . COMA arguments
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    RPAREN          reduce using rule 21 (arguments -> expression .)
    COMA            shift and go to state 39
    PLUS            shift and go to state 18
    MINUS           shift and go to state 19
    MULTIPLY        shift and go to state 20
    DIVIDE          shift and go to state 21


state 35

    (19) statement -> IMPRIMIR LPAREN expression RPAREN .
    (20) statement -> IMPRIMIR LPAREN expression RPAREN . PTCOMA

    FUNCION         reduce using rule 19 (statement -> IMPRIMIR LPAREN expression RPAREN .)
    RETURN          reduce using rule 19 (statement -> IMPRIMIR LPAREN expression RPAREN .)
    IMPRIMIR        reduce using rule 19 (statement -> IMPRIMIR LPAREN expression RPAREN .)
    $end            reduce using rule 19 (statement -> IMPRIMIR LPAREN expression RPAREN .)
    LLAVDER         reduce using rule 19 (statement -> IMPRIMIR LPAREN expression RPAREN .)
    PTCOMA          shift and go to state 40


state 36

    (10) function -> FUNCION ID LPAREN parameters RPAREN . block
    (16) block -> . LLAVIZQ statement_list LLAVDER

    LLAVIZQ         shift and go to state 42

    block                          shift and go to state 41

state 37

    (11) parameters -> parameters COMA . ID

    ID              shift and go to state 43


state 38

    (14) expression -> ID LPAREN arguments RPAREN .

    PTCOMA          reduce using rule 14 (expression -> ID LPAREN arguments RPAREN .)
    PLUS            reduce using rule 14 (expression -> ID LPAREN arguments RPAREN .)
    MINUS           reduce using rule 14 (expression -> ID LPAREN arguments RPAREN .)
    MULTIPLY        reduce using rule 14 (expression -> ID LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 14 (expression -> ID LPAREN arguments RPAREN .)
    RPAREN          reduce using rule 14 (expression -> ID LPAREN arguments RPAREN .)
    COMA            reduce using rule 14 (expression -> ID LPAREN arguments RPAREN .)


state 39

    (22) arguments -> expression COMA . arguments
    (21) arguments -> . expression
    (22) arguments -> . expression COMA arguments
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . LPAREN expression RPAREN
    (14) expression -> . ID LPAREN arguments RPAREN

    NUMBER          shift and go to state 12
    LPAREN          shift and go to state 13
    ID              shift and go to state 14

    expression                     shift and go to state 34
    arguments                      shift and go to state 44

state 40

    (20) statement -> IMPRIMIR LPAREN expression RPAREN PTCOMA .

    FUNCION         reduce using rule 20 (statement -> IMPRIMIR LPAREN expression RPAREN PTCOMA .)
    RETURN          reduce using rule 20 (statement -> IMPRIMIR LPAREN expression RPAREN PTCOMA .)
    IMPRIMIR        reduce using rule 20 (statement -> IMPRIMIR LPAREN expression RPAREN PTCOMA .)
    $end            reduce using rule 20 (statement -> IMPRIMIR LPAREN expression RPAREN PTCOMA .)
    LLAVDER         reduce using rule 20 (statement -> IMPRIMIR LPAREN expression RPAREN PTCOMA .)


state 41

    (10) function -> FUNCION ID LPAREN parameters RPAREN block .

    FUNCION         reduce using rule 10 (function -> FUNCION ID LPAREN parameters RPAREN block .)
    RETURN          reduce using rule 10 (function -> FUNCION ID LPAREN parameters RPAREN block .)
    IMPRIMIR        reduce using rule 10 (function -> FUNCION ID LPAREN parameters RPAREN block .)
    $end            reduce using rule 10 (function -> FUNCION ID LPAREN parameters RPAREN block .)


state 42

    (16) block -> LLAVIZQ . statement_list LLAVDER
    (17) statement_list -> . statement
    (18) statement_list -> . statement statement_list
    (15) statement -> . RETURN expression PTCOMA
    (19) statement -> . IMPRIMIR LPAREN expression RPAREN
    (20) statement -> . IMPRIMIR LPAREN expression RPAREN PTCOMA

    RETURN          shift and go to state 6
    IMPRIMIR        shift and go to state 7

    statement_list                 shift and go to state 45
    statement                      shift and go to state 46

state 43

    (11) parameters -> parameters COMA ID .

    RPAREN          reduce using rule 11 (parameters -> parameters COMA ID .)
    COMA            reduce using rule 11 (parameters -> parameters COMA ID .)


state 44

    (22) arguments -> expression COMA arguments .

    RPAREN          reduce using rule 22 (arguments -> expression COMA arguments .)


state 45

    (16) block -> LLAVIZQ statement_list . LLAVDER

    LLAVDER         shift and go to state 47


state 46

    (17) statement_list -> statement .
    (18) statement_list -> statement . statement_list
    (17) statement_list -> . statement
    (18) statement_list -> . statement statement_list
    (15) statement -> . RETURN expression PTCOMA
    (19) statement -> . IMPRIMIR LPAREN expression RPAREN
    (20) statement -> . IMPRIMIR LPAREN expression RPAREN PTCOMA

    LLAVDER         reduce using rule 17 (statement_list -> statement .)
    RETURN          shift and go to state 6
    IMPRIMIR        shift and go to state 7

    statement                      shift and go to state 46
    statement_list                 shift and go to state 48

state 47

    (16) block -> LLAVIZQ statement_list LLAVDER .

    FUNCION         reduce using rule 16 (block -> LLAVIZQ statement_list LLAVDER .)
    RETURN          reduce using rule 16 (block -> LLAVIZQ statement_list LLAVDER .)
    IMPRIMIR        reduce using rule 16 (block -> LLAVIZQ statement_list LLAVDER .)
    $end            reduce using rule 16 (block -> LLAVIZQ statement_list LLAVDER .)


state 48

    (18) statement_list -> statement statement_list .

    LLAVDER         reduce using rule 18 (statement_list -> statement statement_list .)

