Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMA
    FUNCION
    LLAVDER
    LLAVIZQ
    RETURN

Grammar

Rule 0     S' -> program
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> expression MINUS expression
Rule 3     expression -> expression MULTIPLY expression
Rule 4     expression -> expression DIVIDE expression
Rule 5     expression -> NUMBER
Rule 6     expression -> FLOAT
Rule 7     expression -> STRING
Rule 8     expression -> ID
Rule 9     statement -> ID EQUALS expression PTCOMA
Rule 10    statement -> IMPRIMIR LPAREN expression RPAREN PTCOMA
Rule 11    program -> statement program
Rule 12    program -> empty
Rule 13    empty -> <empty>

Terminals, with rules where they appear

COMA                 : 
DIVIDE               : 4
EQUALS               : 9
FLOAT                : 6
FUNCION              : 
ID                   : 8 9
IMPRIMIR             : 10
LLAVDER              : 
LLAVIZQ              : 
LPAREN               : 10
MINUS                : 2
MULTIPLY             : 3
NUMBER               : 5
PLUS                 : 1
PTCOMA               : 9 10
RETURN               : 
RPAREN               : 10
STRING               : 7
error                : 

Nonterminals, with rules where they appear

empty                : 12
expression           : 1 1 2 2 3 3 4 4 9 10
program              : 11 0
statement            : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (11) program -> . statement program
    (12) program -> . empty
    (9) statement -> . ID EQUALS expression PTCOMA
    (10) statement -> . IMPRIMIR LPAREN expression RPAREN PTCOMA
    (13) empty -> .

    ID              shift and go to state 4
    IMPRIMIR        shift and go to state 5
    $end            reduce using rule 13 (empty -> .)

    program                        shift and go to state 1
    statement                      shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (11) program -> statement . program
    (11) program -> . statement program
    (12) program -> . empty
    (9) statement -> . ID EQUALS expression PTCOMA
    (10) statement -> . IMPRIMIR LPAREN expression RPAREN PTCOMA
    (13) empty -> .

    ID              shift and go to state 4
    IMPRIMIR        shift and go to state 5
    $end            reduce using rule 13 (empty -> .)

    statement                      shift and go to state 2
    program                        shift and go to state 6
    empty                          shift and go to state 3

state 3

    (12) program -> empty .

    $end            reduce using rule 12 (program -> empty .)


state 4

    (9) statement -> ID . EQUALS expression PTCOMA

    EQUALS          shift and go to state 7


state 5

    (10) statement -> IMPRIMIR . LPAREN expression RPAREN PTCOMA

    LPAREN          shift and go to state 8


state 6

    (11) program -> statement program .

    $end            reduce using rule 11 (program -> statement program .)


state 7

    (9) statement -> ID EQUALS . expression PTCOMA
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . FLOAT
    (7) expression -> . STRING
    (8) expression -> . ID

    NUMBER          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 9

    expression                     shift and go to state 10

state 8

    (10) statement -> IMPRIMIR LPAREN . expression RPAREN PTCOMA
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . FLOAT
    (7) expression -> . STRING
    (8) expression -> . ID

    NUMBER          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 9

    expression                     shift and go to state 14

state 9

    (8) expression -> ID .

    PTCOMA          reduce using rule 8 (expression -> ID .)
    PLUS            reduce using rule 8 (expression -> ID .)
    MINUS           reduce using rule 8 (expression -> ID .)
    MULTIPLY        reduce using rule 8 (expression -> ID .)
    DIVIDE          reduce using rule 8 (expression -> ID .)
    RPAREN          reduce using rule 8 (expression -> ID .)


state 10

    (9) statement -> ID EQUALS expression . PTCOMA
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PTCOMA          shift and go to state 15
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MULTIPLY        shift and go to state 18
    DIVIDE          shift and go to state 19


state 11

    (5) expression -> NUMBER .

    PTCOMA          reduce using rule 5 (expression -> NUMBER .)
    PLUS            reduce using rule 5 (expression -> NUMBER .)
    MINUS           reduce using rule 5 (expression -> NUMBER .)
    MULTIPLY        reduce using rule 5 (expression -> NUMBER .)
    DIVIDE          reduce using rule 5 (expression -> NUMBER .)
    RPAREN          reduce using rule 5 (expression -> NUMBER .)


state 12

    (6) expression -> FLOAT .

    PTCOMA          reduce using rule 6 (expression -> FLOAT .)
    PLUS            reduce using rule 6 (expression -> FLOAT .)
    MINUS           reduce using rule 6 (expression -> FLOAT .)
    MULTIPLY        reduce using rule 6 (expression -> FLOAT .)
    DIVIDE          reduce using rule 6 (expression -> FLOAT .)
    RPAREN          reduce using rule 6 (expression -> FLOAT .)


state 13

    (7) expression -> STRING .

    PTCOMA          reduce using rule 7 (expression -> STRING .)
    PLUS            reduce using rule 7 (expression -> STRING .)
    MINUS           reduce using rule 7 (expression -> STRING .)
    MULTIPLY        reduce using rule 7 (expression -> STRING .)
    DIVIDE          reduce using rule 7 (expression -> STRING .)
    RPAREN          reduce using rule 7 (expression -> STRING .)


state 14

    (10) statement -> IMPRIMIR LPAREN expression . RPAREN PTCOMA
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    RPAREN          shift and go to state 20
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17
    MULTIPLY        shift and go to state 18
    DIVIDE          shift and go to state 19


state 15

    (9) statement -> ID EQUALS expression PTCOMA .

    ID              reduce using rule 9 (statement -> ID EQUALS expression PTCOMA .)
    IMPRIMIR        reduce using rule 9 (statement -> ID EQUALS expression PTCOMA .)
    $end            reduce using rule 9 (statement -> ID EQUALS expression PTCOMA .)


state 16

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . FLOAT
    (7) expression -> . STRING
    (8) expression -> . ID

    NUMBER          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 9

    expression                     shift and go to state 21

state 17

    (2) expression -> expression MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . FLOAT
    (7) expression -> . STRING
    (8) expression -> . ID

    NUMBER          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 9

    expression                     shift and go to state 22

state 18

    (3) expression -> expression MULTIPLY . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . FLOAT
    (7) expression -> . STRING
    (8) expression -> . ID

    NUMBER          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 9

    expression                     shift and go to state 23

state 19

    (4) expression -> expression DIVIDE . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression MULTIPLY expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . NUMBER
    (6) expression -> . FLOAT
    (7) expression -> . STRING
    (8) expression -> . ID

    NUMBER          shift and go to state 11
    FLOAT           shift and go to state 12
    STRING          shift and go to state 13
    ID              shift and go to state 9

    expression                     shift and go to state 24

state 20

    (10) statement -> IMPRIMIR LPAREN expression RPAREN . PTCOMA

    PTCOMA          shift and go to state 25


state 21

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PTCOMA          reduce using rule 1 (expression -> expression PLUS expression .)
    PLUS            reduce using rule 1 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 1 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 1 (expression -> expression PLUS expression .)
    MULTIPLY        shift and go to state 18
    DIVIDE          shift and go to state 19

  ! MULTIPLY        [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 16 ]
  ! MINUS           [ shift and go to state 17 ]


state 22

    (2) expression -> expression MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PTCOMA          reduce using rule 2 (expression -> expression MINUS expression .)
    PLUS            reduce using rule 2 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 2 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 2 (expression -> expression MINUS expression .)
    MULTIPLY        shift and go to state 18
    DIVIDE          shift and go to state 19

  ! MULTIPLY        [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 16 ]
  ! MINUS           [ shift and go to state 17 ]


state 23

    (3) expression -> expression MULTIPLY expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PTCOMA          reduce using rule 3 (expression -> expression MULTIPLY expression .)
    PLUS            reduce using rule 3 (expression -> expression MULTIPLY expression .)
    MINUS           reduce using rule 3 (expression -> expression MULTIPLY expression .)
    MULTIPLY        reduce using rule 3 (expression -> expression MULTIPLY expression .)
    DIVIDE          reduce using rule 3 (expression -> expression MULTIPLY expression .)
    RPAREN          reduce using rule 3 (expression -> expression MULTIPLY expression .)

  ! PLUS            [ shift and go to state 16 ]
  ! MINUS           [ shift and go to state 17 ]
  ! MULTIPLY        [ shift and go to state 18 ]
  ! DIVIDE          [ shift and go to state 19 ]


state 24

    (4) expression -> expression DIVIDE expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . MULTIPLY expression
    (4) expression -> expression . DIVIDE expression

    PTCOMA          reduce using rule 4 (expression -> expression DIVIDE expression .)
    PLUS            reduce using rule 4 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 4 (expression -> expression DIVIDE expression .)
    MULTIPLY        reduce using rule 4 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 4 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 4 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 16 ]
  ! MINUS           [ shift and go to state 17 ]
  ! MULTIPLY        [ shift and go to state 18 ]
  ! DIVIDE          [ shift and go to state 19 ]


state 25

    (10) statement -> IMPRIMIR LPAREN expression RPAREN PTCOMA .

    ID              reduce using rule 10 (statement -> IMPRIMIR LPAREN expression RPAREN PTCOMA .)
    IMPRIMIR        reduce using rule 10 (statement -> IMPRIMIR LPAREN expression RPAREN PTCOMA .)
    $end            reduce using rule 10 (statement -> IMPRIMIR LPAREN expression RPAREN PTCOMA .)

