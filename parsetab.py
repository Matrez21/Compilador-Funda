
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftELSEleftORleftANDleftLESSGREATERleftPLUSMINUSleftTIMESDIVIDErightNOTAND APPEND BREAK COMMA DIVIDE ELSE EQUALS EQUALS_EQUALS FOR FUNC GREATER ID IF LBRACE LESS LPAREN LSQUARE MINUS NOT NUMBER OR PERIOD PLUS PRINT RBRACE RETURN RPAREN RSQUARE SEMICOLON STRING TIMES WHILEstatement : FUNC ID LPAREN param_list RPAREN blockexpression : ID LPAREN expression_list RPARENstatement : RETURN expression SEMICOLONparam_list : param_list COMMA ID\n                  | ID\n                  | emptyprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : statement_function\n                 | statement_return\n                 | statement_print\n                 | statement_assign\n                 | statement_if\n                 | statement_while\n                 | statement_for\n                 | statement_append\n                 | blockstatement_function : FUNC ID LPAREN param_list RPAREN blockstatement_return : RETURN expression SEMICOLONstatement_print : PRINT LPAREN expression_list RPAREN SEMICOLONstatement_append : ID PERIOD APPEND LPAREN expression RPAREN SEMICOLONstatement : BREAK SEMICOLONexpression_list : expression_list COMMA expression\n                       | expressionexpression : LSQUARE expression_list RSQUAREexpression : LBRACE RBRACEstatement_assign : ID EQUALS expression SEMICOLONassign_expression : ID EQUALS expressionassign_expression_opt : assign_expression\n                             | emptyexpression_opt : expression\n                      | emptyempty :statement_if : IF LPAREN expression RPAREN statement\n                    | IF LPAREN expression RPAREN statement ELSE statementstatement_while : WHILE LPAREN expression RPAREN statementstatement_for : FOR LPAREN assign_expression_opt SEMICOLON expression_opt SEMICOLON assign_expression_opt RPAREN statementblock : LBRACE statement_list RBRACEexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression LESS expression\n                  | expression GREATER expression\n                  | expression EQUALS_EQUALS expression\n                  | expression AND expression\n                  | expression OR expressionexpression : NOT expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRINGexpression : ID'
    
_lr_action_items = {'FUNC':([0,2,3,6,8,9,10,11,12,13,14,15,21,22,34,39,43,66,70,86,87,95,96,97,102,105,107,108,110,111,],[4,4,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,4,-8,-23,4,-3,-39,-28,4,4,-21,-35,-37,-1,4,-22,-36,4,-38,]),'RETURN':([0,2,3,6,8,9,10,11,12,13,14,15,21,22,34,39,43,66,70,86,87,95,96,97,102,105,107,108,110,111,],[7,7,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,7,-8,-23,7,-3,-39,-28,7,7,-21,-35,-37,-1,7,-22,-36,7,-38,]),'BREAK':([0,2,3,6,8,9,10,11,12,13,14,15,21,22,34,39,43,66,70,86,87,95,96,97,102,105,107,108,110,111,],[16,16,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,16,-8,-23,16,-3,-39,-28,16,16,-21,-35,-37,-1,16,-22,-36,16,-38,]),'PRINT':([0,2,3,6,8,9,10,11,12,13,14,15,21,22,34,39,43,66,70,86,87,95,96,97,102,105,107,108,110,111,],[17,17,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,17,-8,-23,17,-3,-39,-28,17,17,-21,-35,-37,-1,17,-22,-36,17,-38,]),'ID':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,21,22,24,28,29,31,34,35,36,37,38,39,40,43,44,45,46,47,48,49,50,51,52,53,66,70,71,84,86,87,88,89,91,95,96,97,102,105,106,107,108,110,111,],[5,5,-9,23,-18,27,-10,-11,-12,-13,-14,-15,-16,-17,5,-8,27,27,27,27,-23,27,27,27,65,5,67,-3,27,27,27,27,27,27,27,27,27,27,-39,-28,27,27,5,5,27,27,103,-21,-35,-37,-1,5,65,-22,-36,5,-38,]),'IF':([0,2,3,6,8,9,10,11,12,13,14,15,21,22,34,39,43,66,70,86,87,95,96,97,102,105,107,108,110,111,],[18,18,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,18,-8,-23,18,-3,-39,-28,18,18,-21,-35,-37,-1,18,-22,-36,18,-38,]),'WHILE':([0,2,3,6,8,9,10,11,12,13,14,15,21,22,34,39,43,66,70,86,87,95,96,97,102,105,107,108,110,111,],[19,19,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,19,-8,-23,19,-3,-39,-28,19,19,-21,-35,-37,-1,19,-22,-36,19,-38,]),'FOR':([0,2,3,6,8,9,10,11,12,13,14,15,21,22,34,39,43,66,70,86,87,95,96,97,102,105,107,108,110,111,],[20,20,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,20,-8,-23,20,-3,-39,-28,20,20,-21,-35,-37,-1,20,-22,-36,20,-38,]),'LBRACE':([0,2,3,6,7,8,9,10,11,12,13,14,15,21,22,24,28,29,31,34,35,36,37,39,43,44,45,46,47,48,49,50,51,52,53,66,70,71,84,86,87,88,89,90,95,96,97,102,105,107,108,110,111,],[21,21,-9,-18,30,-10,-11,-12,-13,-14,-15,-16,-17,21,-8,30,30,30,30,-23,30,30,30,21,-3,30,30,30,30,30,30,30,30,30,30,-39,-28,30,30,21,21,30,30,21,-21,-35,-37,-1,21,-22,-36,21,-38,]),'$end':([1,2,3,6,8,9,10,11,12,13,14,15,22,34,43,66,70,95,96,97,102,107,108,111,],[0,-7,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,-8,-23,-3,-39,-28,-21,-35,-37,-1,-22,-36,-38,]),'RBRACE':([3,6,8,9,10,11,12,13,14,15,22,30,34,39,43,66,70,95,96,97,102,107,108,111,],[-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,-8,57,-23,66,-3,-39,-28,-21,-35,-37,-1,-22,-36,-38,]),'EQUALS':([5,65,],[24,89,]),'PERIOD':([5,],[25,]),'ELSE':([6,8,9,10,11,12,13,14,15,34,43,66,70,95,96,97,102,107,108,111,],[-18,-10,-11,-12,-13,-14,-15,-16,-17,-23,-3,-39,-28,-21,105,-37,-1,-22,-36,-38,]),'LSQUARE':([7,24,28,29,31,35,36,37,44,45,46,47,48,49,50,51,52,53,71,84,88,89,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'NOT':([7,24,28,29,31,35,36,37,44,45,46,47,48,49,50,51,52,53,71,84,88,89,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'LPAREN':([7,17,18,19,20,23,24,27,28,29,31,35,36,37,42,44,45,46,47,48,49,50,51,52,53,71,84,88,89,],[28,35,36,37,38,40,28,53,28,28,28,28,28,28,71,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'NUMBER':([7,24,28,29,31,35,36,37,44,45,46,47,48,49,50,51,52,53,71,84,88,89,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'STRING':([7,24,28,29,31,35,36,37,44,45,46,47,48,49,50,51,52,53,71,84,88,89,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'SEMICOLON':([16,26,27,32,33,38,41,57,58,62,63,64,72,73,74,75,76,77,78,79,80,82,83,85,88,93,98,99,100,101,104,],[34,43,-53,-51,-52,-34,70,-27,-49,88,-30,-31,-40,-41,-42,-43,-44,-45,-46,-47,-48,-50,-26,95,-34,-2,106,-32,-33,-29,107,]),'APPEND':([25,],[42,]),'PLUS':([26,27,32,33,41,54,56,57,58,60,61,72,73,74,75,76,77,78,79,80,82,83,92,93,94,99,101,],[44,-53,-51,-52,44,44,44,-27,-49,44,44,-40,-41,-42,-43,44,44,44,44,44,-50,-26,44,-2,44,44,44,]),'MINUS':([26,27,32,33,41,54,56,57,58,60,61,72,73,74,75,76,77,78,79,80,82,83,92,93,94,99,101,],[45,-53,-51,-52,45,45,45,-27,-49,45,45,-40,-41,-42,-43,45,45,45,45,45,-50,-26,45,-2,45,45,45,]),'TIMES':([26,27,32,33,41,54,56,57,58,60,61,72,73,74,75,76,77,78,79,80,82,83,92,93,94,99,101,],[46,-53,-51,-52,46,46,46,-27,-49,46,46,46,46,-42,-43,46,46,46,46,46,-50,-26,46,-2,46,46,46,]),'DIVIDE':([26,27,32,33,41,54,56,57,58,60,61,72,73,74,75,76,77,78,79,80,82,83,92,93,94,99,101,],[47,-53,-51,-52,47,47,47,-27,-49,47,47,47,47,-42,-43,47,47,47,47,47,-50,-26,47,-2,47,47,47,]),'LESS':([26,27,32,33,41,54,56,57,58,60,61,72,73,74,75,76,77,78,79,80,82,83,92,93,94,99,101,],[48,-53,-51,-52,48,48,48,-27,-49,48,48,-40,-41,-42,-43,-44,-45,48,48,48,-50,-26,48,-2,48,48,48,]),'GREATER':([26,27,32,33,41,54,56,57,58,60,61,72,73,74,75,76,77,78,79,80,82,83,92,93,94,99,101,],[49,-53,-51,-52,49,49,49,-27,-49,49,49,-40,-41,-42,-43,-44,-45,49,49,49,-50,-26,49,-2,49,49,49,]),'EQUALS_EQUALS':([26,27,32,33,41,54,56,57,58,60,61,72,73,74,75,76,77,78,79,80,82,83,92,93,94,99,101,],[50,-53,-51,-52,50,50,50,-27,-49,50,50,-40,-41,-42,-43,-44,-45,50,-47,-48,-50,-26,50,-2,50,50,50,]),'AND':([26,27,32,33,41,54,56,57,58,60,61,72,73,74,75,76,77,78,79,80,82,83,92,93,94,99,101,],[51,-53,-51,-52,51,51,51,-27,-49,51,51,-40,-41,-42,-43,-44,-45,51,-47,51,-50,-26,51,-2,51,51,51,]),'OR':([26,27,32,33,41,54,56,57,58,60,61,72,73,74,75,76,77,78,79,80,82,83,92,93,94,99,101,],[52,-53,-51,-52,52,52,52,-27,-49,52,52,-40,-41,-42,-43,-44,-45,52,-47,-48,-50,-26,52,-2,52,52,52,]),'RPAREN':([27,32,33,40,54,56,57,58,59,60,61,63,64,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,92,93,94,101,103,106,109,],[-53,-51,-52,-34,82,-25,-27,-49,85,86,87,-30,-31,-5,90,-6,-40,-41,-42,-43,-44,-45,-46,-47,-48,93,-50,-26,104,-2,-24,-29,-4,-34,110,]),'RSQUARE':([27,32,33,55,56,57,58,72,73,74,75,76,77,78,79,80,82,83,93,94,],[-53,-51,-52,83,-25,-27,-49,-40,-41,-42,-43,-44,-45,-46,-47,-48,-50,-26,-2,-24,]),'COMMA':([27,32,33,40,55,56,57,58,59,67,68,69,72,73,74,75,76,77,78,79,80,81,82,83,93,94,103,],[-53,-51,-52,-34,84,-25,-27,-49,84,-5,91,-6,-40,-41,-42,-43,-44,-45,-46,-47,-48,84,-50,-26,-2,-24,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,21,],[2,39,]),'statement':([0,2,21,39,86,87,105,110,],[3,22,3,22,96,97,108,111,]),'block':([0,2,21,39,86,87,90,105,110,],[6,6,6,6,6,6,102,6,6,]),'statement_function':([0,2,21,39,86,87,105,110,],[8,8,8,8,8,8,8,8,]),'statement_return':([0,2,21,39,86,87,105,110,],[9,9,9,9,9,9,9,9,]),'statement_print':([0,2,21,39,86,87,105,110,],[10,10,10,10,10,10,10,10,]),'statement_assign':([0,2,21,39,86,87,105,110,],[11,11,11,11,11,11,11,11,]),'statement_if':([0,2,21,39,86,87,105,110,],[12,12,12,12,12,12,12,12,]),'statement_while':([0,2,21,39,86,87,105,110,],[13,13,13,13,13,13,13,13,]),'statement_for':([0,2,21,39,86,87,105,110,],[14,14,14,14,14,14,14,14,]),'statement_append':([0,2,21,39,86,87,105,110,],[15,15,15,15,15,15,15,15,]),'expression':([7,24,28,29,31,35,36,37,44,45,46,47,48,49,50,51,52,53,71,84,88,89,],[26,41,54,56,58,56,60,61,72,73,74,75,76,77,78,79,80,56,92,94,99,101,]),'expression_list':([29,35,53,],[55,59,81,]),'assign_expression_opt':([38,106,],[62,109,]),'assign_expression':([38,106,],[63,63,]),'empty':([38,40,88,106,],[64,69,100,64,]),'param_list':([40,],[68,]),'expression_opt':([88,],[98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('statement -> FUNC ID LPAREN param_list RPAREN block','statement',6,'p_function_definition','parser.py',61),
  ('expression -> ID LPAREN expression_list RPAREN','expression',4,'p_function_call','parser.py',65),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_return_statement','parser.py',69),
  ('param_list -> param_list COMMA ID','param_list',3,'p_param_list','parser.py',73),
  ('param_list -> ID','param_list',1,'p_param_list','parser.py',74),
  ('param_list -> empty','param_list',1,'p_param_list','parser.py',75),
  ('program -> statement_list','program',1,'p_program','parser.py',279),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',283),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',284),
  ('statement -> statement_function','statement',1,'p_statement','parser.py',292),
  ('statement -> statement_return','statement',1,'p_statement','parser.py',293),
  ('statement -> statement_print','statement',1,'p_statement','parser.py',294),
  ('statement -> statement_assign','statement',1,'p_statement','parser.py',295),
  ('statement -> statement_if','statement',1,'p_statement','parser.py',296),
  ('statement -> statement_while','statement',1,'p_statement','parser.py',297),
  ('statement -> statement_for','statement',1,'p_statement','parser.py',298),
  ('statement -> statement_append','statement',1,'p_statement','parser.py',299),
  ('statement -> block','statement',1,'p_statement','parser.py',300),
  ('statement_function -> FUNC ID LPAREN param_list RPAREN block','statement_function',6,'p_statement_function','parser.py',304),
  ('statement_return -> RETURN expression SEMICOLON','statement_return',3,'p_statement_return','parser.py',308),
  ('statement_print -> PRINT LPAREN expression_list RPAREN SEMICOLON','statement_print',5,'p_statement_print','parser.py',313),
  ('statement_append -> ID PERIOD APPEND LPAREN expression RPAREN SEMICOLON','statement_append',7,'p_statement_append','parser.py',317),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_break','parser.py',321),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',326),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',327),
  ('expression -> LSQUARE expression_list RSQUARE','expression',3,'p_expression_array','parser.py',335),
  ('expression -> LBRACE RBRACE','expression',2,'p_expression_list_init','parser.py',339),
  ('statement_assign -> ID EQUALS expression SEMICOLON','statement_assign',4,'p_statement_assign','parser.py',344),
  ('assign_expression -> ID EQUALS expression','assign_expression',3,'p_assign_expression','parser.py',348),
  ('assign_expression_opt -> assign_expression','assign_expression_opt',1,'p_assign_expression_opt','parser.py',352),
  ('assign_expression_opt -> empty','assign_expression_opt',1,'p_assign_expression_opt','parser.py',353),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',357),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',358),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',362),
  ('statement_if -> IF LPAREN expression RPAREN statement','statement_if',5,'p_statement_if','parser.py',366),
  ('statement_if -> IF LPAREN expression RPAREN statement ELSE statement','statement_if',7,'p_statement_if','parser.py',367),
  ('statement_while -> WHILE LPAREN expression RPAREN statement','statement_while',5,'p_statement_while','parser.py',374),
  ('statement_for -> FOR LPAREN assign_expression_opt SEMICOLON expression_opt SEMICOLON assign_expression_opt RPAREN statement','statement_for',9,'p_statement_for','parser.py',378),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','parser.py',382),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',386),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',387),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',388),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',389),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','parser.py',390),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','parser.py',391),
  ('expression -> expression EQUALS_EQUALS expression','expression',3,'p_expression_binop','parser.py',392),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',393),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',394),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',398),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',402),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',406),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',410),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',414),
]
