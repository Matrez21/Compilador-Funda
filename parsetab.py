
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programleftELSEleftORleftANDleftLESSGREATERleftPLUSMINUSleftTIMESDIVIDErightNOTrightUMINUSAND APPEND BREAK COMMA DIVIDE ELSE EQUALS EQUALS_EQUALS FOR FUNC GREATER ID IF LBRACE LESS LPAREN LSQUARE MINUS NOT NUMBER OR PERIOD PLUS PRINT RBRACE RETURN RPAREN RSQUARE SEMICOLON STRING TIMES WHILEstatement : FUNC ID LPAREN param_list RPAREN blockexpression : ID LPAREN expression_list RPARENstatement : RETURN expression SEMICOLONparam_list : param_list COMMA ID\n                  | ID\n                  | emptyprogram : statement_liststatement_list : statement_list statement\n                      | statementstatement : statement_function\n                 | statement_return\n                 | statement_print\n                 | statement_assign\n                 | statement_if\n                 | statement_while\n                 | statement_for\n                 | statement_append\n                 | blockstatement_function : FUNC ID LPAREN param_list RPAREN blockstatement_return : RETURN expression SEMICOLONstatement_print : PRINT LPAREN expression_list RPAREN SEMICOLONstatement_append : ID PERIOD APPEND LPAREN expression RPAREN SEMICOLONstatement : BREAK SEMICOLONexpression_list : expression_list COMMA expression\n                       | expressionexpression : LSQUARE expression_list RSQUAREexpression : LBRACE RBRACEexpression : MINUS expression %prec UMINUSstatement_assign : ID EQUALS expression SEMICOLONassign_expression : ID EQUALS expressionassign_expression_opt : assign_expression\n                             | emptyexpression_opt : expression\n                      | emptyempty :statement_if : IF LPAREN expression RPAREN statement\n                    | IF LPAREN expression RPAREN statement ELSE statementstatement_while : WHILE LPAREN expression RPAREN statementstatement_for : FOR LPAREN assign_expression_opt SEMICOLON expression_opt SEMICOLON assign_expression_opt RPAREN statementblock : LBRACE statement_list RBRACEexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression LESS expression\n                  | expression GREATER expression\n                  | expression EQUALS_EQUALS expression\n                  | expression AND expression\n                  | expression OR expressionexpression : NOT expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRINGexpression : ID'
    
_lr_action_items = {'FUNC':([0,2,3,6,8,9,10,11,12,13,14,15,21,22,35,40,44,68,72,88,89,97,98,99,104,107,109,110,112,113,],[4,4,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,4,-8,-23,4,-3,-40,-29,4,4,-21,-36,-38,-1,4,-22,-37,4,-39,]),'RETURN':([0,2,3,6,8,9,10,11,12,13,14,15,21,22,35,40,44,68,72,88,89,97,98,99,104,107,109,110,112,113,],[7,7,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,7,-8,-23,7,-3,-40,-29,7,7,-21,-36,-38,-1,7,-22,-37,7,-39,]),'BREAK':([0,2,3,6,8,9,10,11,12,13,14,15,21,22,35,40,44,68,72,88,89,97,98,99,104,107,109,110,112,113,],[16,16,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,16,-8,-23,16,-3,-40,-29,16,16,-21,-36,-38,-1,16,-22,-37,16,-39,]),'PRINT':([0,2,3,6,8,9,10,11,12,13,14,15,21,22,35,40,44,68,72,88,89,97,98,99,104,107,109,110,112,113,],[17,17,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,17,-8,-23,17,-3,-40,-29,17,17,-21,-36,-38,-1,17,-22,-37,17,-39,]),'ID':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,21,22,24,28,29,31,32,35,36,37,38,39,40,41,44,45,46,47,48,49,50,51,52,53,54,68,72,73,86,88,89,90,91,93,97,98,99,104,107,108,109,110,112,113,],[5,5,-9,23,-18,27,-10,-11,-12,-13,-14,-15,-16,-17,5,-8,27,27,27,27,27,-23,27,27,27,67,5,69,-3,27,27,27,27,27,27,27,27,27,27,-40,-29,27,27,5,5,27,27,105,-21,-36,-38,-1,5,67,-22,-37,5,-39,]),'IF':([0,2,3,6,8,9,10,11,12,13,14,15,21,22,35,40,44,68,72,88,89,97,98,99,104,107,109,110,112,113,],[18,18,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,18,-8,-23,18,-3,-40,-29,18,18,-21,-36,-38,-1,18,-22,-37,18,-39,]),'WHILE':([0,2,3,6,8,9,10,11,12,13,14,15,21,22,35,40,44,68,72,88,89,97,98,99,104,107,109,110,112,113,],[19,19,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,19,-8,-23,19,-3,-40,-29,19,19,-21,-36,-38,-1,19,-22,-37,19,-39,]),'FOR':([0,2,3,6,8,9,10,11,12,13,14,15,21,22,35,40,44,68,72,88,89,97,98,99,104,107,109,110,112,113,],[20,20,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,20,-8,-23,20,-3,-40,-29,20,20,-21,-36,-38,-1,20,-22,-37,20,-39,]),'LBRACE':([0,2,3,6,7,8,9,10,11,12,13,14,15,21,22,24,28,29,31,32,35,36,37,38,40,44,45,46,47,48,49,50,51,52,53,54,68,72,73,86,88,89,90,91,92,97,98,99,104,107,109,110,112,113,],[21,21,-9,-18,30,-10,-11,-12,-13,-14,-15,-16,-17,21,-8,30,30,30,30,30,-23,30,30,30,21,-3,30,30,30,30,30,30,30,30,30,30,-40,-29,30,30,21,21,30,30,21,-21,-36,-38,-1,21,-22,-37,21,-39,]),'$end':([1,2,3,6,8,9,10,11,12,13,14,15,22,35,44,68,72,97,98,99,104,109,110,113,],[0,-7,-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,-8,-23,-3,-40,-29,-21,-36,-38,-1,-22,-37,-39,]),'RBRACE':([3,6,8,9,10,11,12,13,14,15,22,30,35,40,44,68,72,97,98,99,104,109,110,113,],[-9,-18,-10,-11,-12,-13,-14,-15,-16,-17,-8,58,-23,68,-3,-40,-29,-21,-36,-38,-1,-22,-37,-39,]),'EQUALS':([5,67,],[24,91,]),'PERIOD':([5,],[25,]),'ELSE':([6,8,9,10,11,12,13,14,15,35,44,68,72,97,98,99,104,109,110,113,],[-18,-10,-11,-12,-13,-14,-15,-16,-17,-23,-3,-40,-29,-21,107,-38,-1,-22,-37,-39,]),'LSQUARE':([7,24,28,29,31,32,36,37,38,45,46,47,48,49,50,51,52,53,54,73,86,90,91,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'MINUS':([7,24,26,27,28,29,31,32,33,34,36,37,38,42,45,46,47,48,49,50,51,52,53,54,55,57,58,59,60,62,63,73,74,75,76,77,78,79,80,81,82,84,85,86,90,91,94,95,96,101,103,],[31,31,46,-54,31,31,31,31,-52,-53,31,31,31,46,31,31,31,31,31,31,31,31,31,31,46,46,-27,-28,-50,46,46,31,-41,-42,-43,-44,46,46,46,46,46,-51,-26,31,31,31,46,-2,46,46,46,]),'NOT':([7,24,28,29,31,32,36,37,38,45,46,47,48,49,50,51,52,53,54,73,86,90,91,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'LPAREN':([7,17,18,19,20,23,24,27,28,29,31,32,36,37,38,43,45,46,47,48,49,50,51,52,53,54,73,86,90,91,],[28,36,37,38,39,41,28,54,28,28,28,28,28,28,28,73,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'NUMBER':([7,24,28,29,31,32,36,37,38,45,46,47,48,49,50,51,52,53,54,73,86,90,91,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'STRING':([7,24,28,29,31,32,36,37,38,45,46,47,48,49,50,51,52,53,54,73,86,90,91,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'SEMICOLON':([16,26,27,33,34,39,42,58,59,60,64,65,66,74,75,76,77,78,79,80,81,82,84,85,87,90,95,100,101,102,103,106,],[35,44,-54,-52,-53,-35,72,-27,-28,-50,90,-31,-32,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-26,97,-35,-2,108,-33,-34,-30,109,]),'APPEND':([25,],[43,]),'PLUS':([26,27,33,34,42,55,57,58,59,60,62,63,74,75,76,77,78,79,80,81,82,84,85,94,95,96,101,103,],[45,-54,-52,-53,45,45,45,-27,-28,-50,45,45,-41,-42,-43,-44,45,45,45,45,45,-51,-26,45,-2,45,45,45,]),'TIMES':([26,27,33,34,42,55,57,58,59,60,62,63,74,75,76,77,78,79,80,81,82,84,85,94,95,96,101,103,],[47,-54,-52,-53,47,47,47,-27,-28,-50,47,47,47,47,-43,-44,47,47,47,47,47,-51,-26,47,-2,47,47,47,]),'DIVIDE':([26,27,33,34,42,55,57,58,59,60,62,63,74,75,76,77,78,79,80,81,82,84,85,94,95,96,101,103,],[48,-54,-52,-53,48,48,48,-27,-28,-50,48,48,48,48,-43,-44,48,48,48,48,48,-51,-26,48,-2,48,48,48,]),'LESS':([26,27,33,34,42,55,57,58,59,60,62,63,74,75,76,77,78,79,80,81,82,84,85,94,95,96,101,103,],[49,-54,-52,-53,49,49,49,-27,-28,-50,49,49,-41,-42,-43,-44,-45,-46,49,49,49,-51,-26,49,-2,49,49,49,]),'GREATER':([26,27,33,34,42,55,57,58,59,60,62,63,74,75,76,77,78,79,80,81,82,84,85,94,95,96,101,103,],[50,-54,-52,-53,50,50,50,-27,-28,-50,50,50,-41,-42,-43,-44,-45,-46,50,50,50,-51,-26,50,-2,50,50,50,]),'EQUALS_EQUALS':([26,27,33,34,42,55,57,58,59,60,62,63,74,75,76,77,78,79,80,81,82,84,85,94,95,96,101,103,],[51,-54,-52,-53,51,51,51,-27,-28,-50,51,51,-41,-42,-43,-44,-45,-46,51,-48,-49,-51,-26,51,-2,51,51,51,]),'AND':([26,27,33,34,42,55,57,58,59,60,62,63,74,75,76,77,78,79,80,81,82,84,85,94,95,96,101,103,],[52,-54,-52,-53,52,52,52,-27,-28,-50,52,52,-41,-42,-43,-44,-45,-46,52,-48,52,-51,-26,52,-2,52,52,52,]),'OR':([26,27,33,34,42,55,57,58,59,60,62,63,74,75,76,77,78,79,80,81,82,84,85,94,95,96,101,103,],[53,-54,-52,-53,53,53,53,-27,-28,-50,53,53,-41,-42,-43,-44,-45,-46,53,-48,-49,-51,-26,53,-2,53,53,53,]),'RPAREN':([27,33,34,41,55,57,58,59,60,61,62,63,65,66,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,94,95,96,103,105,108,111,],[-54,-52,-53,-35,84,-25,-27,-28,-50,87,88,89,-31,-32,-5,92,-6,-41,-42,-43,-44,-45,-46,-47,-48,-49,95,-51,-26,106,-2,-24,-30,-4,-35,112,]),'RSQUARE':([27,33,34,56,57,58,59,60,74,75,76,77,78,79,80,81,82,84,85,95,96,],[-54,-52,-53,85,-25,-27,-28,-50,-41,-42,-43,-44,-45,-46,-47,-48,-49,-51,-26,-2,-24,]),'COMMA':([27,33,34,41,56,57,58,59,60,61,69,70,71,74,75,76,77,78,79,80,81,82,83,84,85,95,96,105,],[-54,-52,-53,-35,86,-25,-27,-28,-50,86,-5,93,-6,-41,-42,-43,-44,-45,-46,-47,-48,-49,86,-51,-26,-2,-24,-4,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,21,],[2,40,]),'statement':([0,2,21,40,88,89,107,112,],[3,22,3,22,98,99,110,113,]),'block':([0,2,21,40,88,89,92,107,112,],[6,6,6,6,6,6,104,6,6,]),'statement_function':([0,2,21,40,88,89,107,112,],[8,8,8,8,8,8,8,8,]),'statement_return':([0,2,21,40,88,89,107,112,],[9,9,9,9,9,9,9,9,]),'statement_print':([0,2,21,40,88,89,107,112,],[10,10,10,10,10,10,10,10,]),'statement_assign':([0,2,21,40,88,89,107,112,],[11,11,11,11,11,11,11,11,]),'statement_if':([0,2,21,40,88,89,107,112,],[12,12,12,12,12,12,12,12,]),'statement_while':([0,2,21,40,88,89,107,112,],[13,13,13,13,13,13,13,13,]),'statement_for':([0,2,21,40,88,89,107,112,],[14,14,14,14,14,14,14,14,]),'statement_append':([0,2,21,40,88,89,107,112,],[15,15,15,15,15,15,15,15,]),'expression':([7,24,28,29,31,32,36,37,38,45,46,47,48,49,50,51,52,53,54,73,86,90,91,],[26,42,55,57,59,60,57,62,63,74,75,76,77,78,79,80,81,82,57,94,96,101,103,]),'expression_list':([29,36,54,],[56,61,83,]),'assign_expression_opt':([39,108,],[64,111,]),'assign_expression':([39,108,],[65,65,]),'empty':([39,41,90,108,],[66,71,102,66,]),'param_list':([41,],[70,]),'expression_opt':([90,],[100,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('statement -> FUNC ID LPAREN param_list RPAREN block','statement',6,'p_function_definition','parser.py',62),
  ('expression -> ID LPAREN expression_list RPAREN','expression',4,'p_function_call','parser.py',66),
  ('statement -> RETURN expression SEMICOLON','statement',3,'p_return_statement','parser.py',70),
  ('param_list -> param_list COMMA ID','param_list',3,'p_param_list','parser.py',74),
  ('param_list -> ID','param_list',1,'p_param_list','parser.py',75),
  ('param_list -> empty','param_list',1,'p_param_list','parser.py',76),
  ('program -> statement_list','program',1,'p_program','parser.py',280),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',284),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',285),
  ('statement -> statement_function','statement',1,'p_statement','parser.py',293),
  ('statement -> statement_return','statement',1,'p_statement','parser.py',294),
  ('statement -> statement_print','statement',1,'p_statement','parser.py',295),
  ('statement -> statement_assign','statement',1,'p_statement','parser.py',296),
  ('statement -> statement_if','statement',1,'p_statement','parser.py',297),
  ('statement -> statement_while','statement',1,'p_statement','parser.py',298),
  ('statement -> statement_for','statement',1,'p_statement','parser.py',299),
  ('statement -> statement_append','statement',1,'p_statement','parser.py',300),
  ('statement -> block','statement',1,'p_statement','parser.py',301),
  ('statement_function -> FUNC ID LPAREN param_list RPAREN block','statement_function',6,'p_statement_function','parser.py',305),
  ('statement_return -> RETURN expression SEMICOLON','statement_return',3,'p_statement_return','parser.py',309),
  ('statement_print -> PRINT LPAREN expression_list RPAREN SEMICOLON','statement_print',5,'p_statement_print','parser.py',314),
  ('statement_append -> ID PERIOD APPEND LPAREN expression RPAREN SEMICOLON','statement_append',7,'p_statement_append','parser.py',318),
  ('statement -> BREAK SEMICOLON','statement',2,'p_statement_break','parser.py',322),
  ('expression_list -> expression_list COMMA expression','expression_list',3,'p_expression_list','parser.py',327),
  ('expression_list -> expression','expression_list',1,'p_expression_list','parser.py',328),
  ('expression -> LSQUARE expression_list RSQUARE','expression',3,'p_expression_array','parser.py',336),
  ('expression -> LBRACE RBRACE','expression',2,'p_expression_list_init','parser.py',340),
  ('expression -> MINUS expression','expression',2,'p_expression_unary','parser.py',344),
  ('statement_assign -> ID EQUALS expression SEMICOLON','statement_assign',4,'p_statement_assign','parser.py',348),
  ('assign_expression -> ID EQUALS expression','assign_expression',3,'p_assign_expression','parser.py',352),
  ('assign_expression_opt -> assign_expression','assign_expression_opt',1,'p_assign_expression_opt','parser.py',356),
  ('assign_expression_opt -> empty','assign_expression_opt',1,'p_assign_expression_opt','parser.py',357),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',361),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',362),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',366),
  ('statement_if -> IF LPAREN expression RPAREN statement','statement_if',5,'p_statement_if','parser.py',370),
  ('statement_if -> IF LPAREN expression RPAREN statement ELSE statement','statement_if',7,'p_statement_if','parser.py',371),
  ('statement_while -> WHILE LPAREN expression RPAREN statement','statement_while',5,'p_statement_while','parser.py',378),
  ('statement_for -> FOR LPAREN assign_expression_opt SEMICOLON expression_opt SEMICOLON assign_expression_opt RPAREN statement','statement_for',9,'p_statement_for','parser.py',382),
  ('block -> LBRACE statement_list RBRACE','block',3,'p_block','parser.py',386),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',390),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',391),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parser.py',392),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',393),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','parser.py',394),
  ('expression -> expression GREATER expression','expression',3,'p_expression_binop','parser.py',395),
  ('expression -> expression EQUALS_EQUALS expression','expression',3,'p_expression_binop','parser.py',396),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','parser.py',397),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','parser.py',398),
  ('expression -> NOT expression','expression',2,'p_expression_not','parser.py',402),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',406),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',410),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',414),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',418),
]
